import groovy.transform.Field

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.4"
    }
}

@Field systemPropertySet

defaultTasks 'clean', 'test'
group 'com.autoportal.automation'
version '1.0-SNAPSHOT'

apply plugin: "io.qameta.allure"
apply plugin: "java"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

allure {
    version = '2.4.1'
    autoconfigure = true
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.3'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'io.rest-assured:rest-assured:3.3.0'
    compile group: 'org.json', name: 'json', version: '20160212'
    compile 'org.testng:testng:6.9.6'
    compile 'org.seleniumhq.selenium:selenium-java:3.5.3'
    compile 'log4j:log4j:1.2.17'
    compile 'ru.yandex.qatools.htmlelements:htmlelements-java:1.8'
    compile 'commons-lang:commons-lang:2.6'
    compile 'io.qameta.allure:allure-testng:2.0-BETA21'
    compile 'org.grails:grails-core:2.4.4'
}

task printConfig {
    return loadConfiguration()
}

loadConfiguration()

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        resources {
            srcDir 'src/test/resources'
        }
    }
}

test {
    useTestNG() {
        useDefaultListeners = true
        systemProperties(System.getProperties() + systemPropertySet)
        println(System.getProperties())
        options.suites(System.getProperty('suite'))
    }
    systemProperty 'allure.results.directory', 'build/allure-results'

    //turn off Gradle's HTML report to avoid replacing the
    //reports generated by TestNG library:
    reports.html.enabled = false
}

def loadConfiguration() {

//    specify common system properties
    System.setProperty('environment', hasProperty('environment') ? environment : 'production')
    System.setProperty('client', hasProperty('client') ? client : 'gc')
    System.setProperty('testBuild', hasProperty('testBuild') ? testBuild : 'Automation build')
    System.setProperty('testPlan', hasProperty('testPlan') ? testPlan : 'Automation Regression Suite')
    System.setProperty('suite', 'src/test/resources/suite/' + hasProperty('suite') ? suite : 'regression.xml.'.toString())
//    System.setProperty('locale', hasProperty('locale') ? locale : 'de')

//    specify env specific properties from config file
    def configFile = file('config.groovy')
    def configProperties = new ConfigSlurper(System.getProperty('environment')).parse(configFile.toURI().toURL())

//    defines if url specified and override it
    def envUrl = (hasProperty('url') && getProperty('url') != "" ? url : configProperties.getProperty('url'))
    configProperties.setProperty('url', envUrl)

//    magic that adds new properties w/o overriding existent ones
    systemPropertySet = System.getProperties() + configProperties.toProperties()
    System.setProperties(systemPropertySet)
    return systemPropertySet
}